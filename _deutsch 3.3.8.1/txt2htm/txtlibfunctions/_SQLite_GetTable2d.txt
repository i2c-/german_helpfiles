###User Defined Function###
_SQLite_GetTable2d

###Description###
Gibt ein 2-dimensionales Array zur&uuml;ck mit Spaltennamen und dem Inhalt der ausgef&uuml;hrten Abfrage

###Syntax###
#include <SQLite.au3>
_SQLite_GetTable2d($hDB, $sSQL, ByRef $aResult, ByRef $iRows, ByRef $iColumns [, $iCharSize = -1 [, $fSwichDimensions = False]])


###Parameters###
@@ParamTable@@
$hDB
	Eine offene Datenbank, verwende -1 um die zuletzt ge&ouml;ffnete Datenbank zu verwenden
$sSQL
	SQL Anweisung, die ausgef&uuml;hrt werden soll
$aResult
	Liefert das Ergebnis
$iRows
	Liefert die Anzahl an 'Daten' Reihen
$iColumns
	Liefert die Anzahl Spalten
$iCharSize
	[optional] bestimmt die maximale L&auml;nge eines Datenfeldes
$fSwichDimensions
	[optional] Wechselt die Dimensionen von  $aResult
@@End@@

###ReturnValue###
@@ReturnTable@@
Erfolg:	Gibt $SQLITE_OK zur&uuml;ck
Fehler:	Der R&uuml;ckgabewert kann verglichen werden gegen $SQLITE_* Konstanten
@error:	-1 - SQLite meldet einen Fehler (pr&uuml;fe R&uuml;ckgabewert)
	1 - Fehler beim Aufruf von _SQLite_Query
	2 - Fehler beim Aufruf der SQLite API 'sqlite3_free_table'
	3 - Ausf&uuml;hrung verhindert durch Sicherheitsmodus
	4 - Abbruch, Trennung oder @error gesetzt durch ein Callback (@extended wird auf einen SQLite Fehler gesetzt)
@@End@@

###Remarks###
Die Anzahl an Werten in $aResult entspricht (($iRows) + 1) * ($iColumns)
Eine NULL wird als numerisch 0 zur&uuml;ckgegeben
Diese Funktion verwendet mehr Arbeitsspeicher als _SQlite_Query() / _SQLite_Fetch*()... aber sie ist schneller.
Wenn man kein Ergebnis ben&ouml;tigt (oder kein Ergebnis entsteht) verwendet man eher SQLite_Exec().

###Related###
_SQLite_GetTable, _SQLite_Exec, _SQlite_Query, _SQLite_Display2DResult

###Example###
@@IncludeExample@@
