###User Defined Function###
_SQLite_GetTable

###Description###
Gibt ein 1-Dimensionales Array aus, das die Tabellennamen und Daten der ausgef&uuml;hrten Abfrage beinhaltet.

###Syntax###
#include <SQLite.au3>
_SQLite_GetTable($hDB, $sSQL, ByRef $aResult, ByRef $iRows, ByRef $iColumns [, $iCharSize = -1])


###Parameters###
@@ParamTable@@
$hDB
	Eine ge&ouml;ffnete Datenbank, verwende -1 f&uuml;r die letzte ge&ouml;ffnete Datenbank
$sSQL
	SQL Anweisung, die ausgef&uuml;hrt werden soll
$aResult
	Gibt das Ergebnis zur&uuml;ck
$iRows
	Gibt die Anzahl an 'Daten' Reihen zur&uuml;ck
$iColumns
	Gibt die Anzahl an Spalten zur&uuml;ck
$iCharSize
	[optional] Legt die maximale Gr&ouml;&szlig;e eines Datenfeldes fest
@@End@@

###ReturnValue###
@@ReturnTable@@
Erfolg:	Gibt $SQLITE_OK zur&uuml;ck
Fehler:	Wert kann mit $SQLITE_* Konstanten verglichen werden
@error:	-1 - SQLite meldet einen Fehler (&uuml;berpr&uuml;fe R&uuml;ckgabewert)
     1 - Aufruf wurde vom Sicherheitsmodus verhindert
     2 - Fehler zur&uuml;ckgegeben durch _SQLite_Query @extended
     3 - Fehler zur&uuml;ckgegeben durch _SQLite_FetchNames @extended
     4 - Fehler zur&uuml;ckgegeben durch _SQLite_FetchData @extended
@@End@@

###Remarks###
Die Anzahl an Werten von $aResult ist (($iRows) + 1) * ($iColumns)
dieser Wert wird ausgegeben in $aResult[0].
Eine NULL wird als numerische 0 zur&uuml;ckgegeben.
Wenn man kein Ergebnis ben&ouml;tigt (oder wenn es kein Ergebnis gibt) ist es besser _SQLite_Execute() oder _SQLite_Exec() zu verwenden.

###Related###
_SQLite_GetTable2d, _SQLite_Exec, _SQlite_Query

###Example###
@@IncludeExample@@
