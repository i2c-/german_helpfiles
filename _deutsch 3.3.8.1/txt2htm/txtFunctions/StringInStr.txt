###Function###
StringInStr

###Description###
Pr&uuml;ft, ob ein String einen angegebenen Unterstring enth&auml;lt.

###Syntax###
StringInStr ( "string", "substring" [, casesense [, occurrence [, start [, count]]]] )

###Parameters###
@@ParamTable@@
string
	Der String, der gepr&uuml;ft werden soll.
substring
	Der Unterstring, nach dem gesucht werden soll.
casesense
	[optional] Flag, ob der Befehl Gro&szlig;-/Kleinschreibung ber&uuml;cksichtigen soll.
	0 = Gro&szlig;- und Kleinschreibung werden nicht ber&uuml;cksichtigt (Standardwert).
	1 = Ber&uuml;cksichtigt Gro&szlig;- und Kleinschreibung.
	2 = Gro&szlig;- und Kleinschreibung werden nicht ber&uuml;cksichtigt. Es findet ein einfacherer, schnellerer Vergleich statt 
occurrence
	[optional] Das wievielte Auftreten des Unterstrings soll gefunden werden. Ist der Wert negativ, wird von rechts ausgehend gesucht. Der Standardwert ist 1 (erstes Auftreten von links ausgehend).
start
	[optional] Die Startposition f&uuml;r die Suche.
count
	[optional] Die Anzahl der Vergleiche. Dies begrenzt effektiv die Suche des kompletten Strings auf einen bestimmten Bereich. Siehe Bemerkungen.
@@End@@

###ReturnValue###
@@ReturnTable@@
Erfolg:	Gibt die Position des Unterstrings zur&uuml;ck.
Fehler:	Gibt 0 zur&uuml;ck, wenn die Unterstring nicht gefunden wurde.

@Error	0 - Normaler Ablauf
	1 - ung&uuml;ltiger "start" oder "occurance" Parameter.
@@End@@

###Remarks###
Die erste Zeichenposition ist 1.

Der count Parameter muss l&auml;nger sein als nach dem zu suchenden Teilstring. Der count Parameter (kombiniert mit dem start Parameter) begrenzt effektiv die Suche des kompletten Strings auf einen bestimmten Bereich. Die folgenden Befehle sind gleich:
StringInStr("zu suchender String um bei", "String", 0, 1, 1, 19)
StringInStr(StringMid("zu suchender String um bei", 1, 19), "String")

###Related###
StringCompare, StringLeft, StringLen, StringLower, StringMid, StringRight, StringTrimLeft, StringTrimRight, StringUpper, StringRegExp, StringSplit

###Example###
@@IncludeExample@@
