###Function###
AutoItSetOption

###Description###
&Auml;ndert den Ablauf verschiedener AutoIt-Funktionen/Parameter.

###Syntax###
AutoItSetOption ( "option" [, param] )


###Parameters###
@@ParamTable@@
option
	Die zu &auml;ndernde Option.  Siehe Bemerkungen.
param
	[optional] Wert, der der Option zugeordnet wird.  Typ und Bedeutung wechseln mit der Option.  Siehe Bemerkungen unten.  Wird kein Parameter &uuml;bergeben, gibt die Funktion nur den der Option zur Zeit zugeordneten Wert zur&uuml;ck.  Das Schl&uuml;sselwort <a href="../keywords/Default.htm">Default</a> kann f&uuml;r den Parameter verwendet werden um die Option auf den Standardwert zur&uuml;ckzusetzen.
@@End@@

###ReturnValue###
@@ReturnTable@@
Erfolg:	Gibt den Wert der vorherigen Einstellung dieser Option zur&uuml;ck.
Fehler:	Setzt @error auf non-zero. Fehler treten auf, wenn die Parameter ung&uuml;ltig sind (z. B. dass eine Option nicht existiert). 
@@End@@                           

###Remarks###
Als Alternative zu AutoItSetOption() kann auch Opt() verwendet werden.

Folgende Optionen sind vorhanden:

@@ParamTable@@
<b>Option</b>
	<b>Param</b>
CaretCoordMode
	<a name="CaretCoordMode"></a>Legt fest, auf welche Weise Koordinaten verwendet werden, entweder absolut oder relativ zum momentan aktiven Fenster:
	0 = relative Koordinaten zum aktiven Fenster
	1 = absolute Bildschirm Koordinaten (Standard)
	2 = relative Koordinaten zur Client Fl&auml;che des aktiven Fensters
ExpandEnvStrings
	<a name="ExpandEnvStrings"></a>&Auml;ndert die Interpretation von Strings und %-Symbolen.  Als Standard werden Strings buchstabengetreu behandelt, diese Option erlaubt die Benutzung von  %environment% Variablen innerhalb von Strings, z.B.: "Das temp Verzeichnis ist: %temp%".
	1 = erweitert Umgebungsvariablen (&auml;hnlich zu AutoIt v2)
	0 = Umgebungsvariablen werden nicht erweitert (Standard)
	 Ohne diese Option w&auml;re der &uuml;bliche Weg:"Das temp Verzeichnis ist:" & EnvGet( "temp")
ExpandVarStrings
	<a name="ExpandVarStrings"></a>&Auml;ndert die Interpretation von String, Variablen- und Makrosymbolen ($ und @).  Als Standard werden Strings buchstabengetreu behandelt, diese Option erlaubt die Benutzung von Variablen und Makros innerhalb von String, z.B.: "Der Wert von var1 ist $var1$".
	1 = erweitert Variablen (sollen innerhalb dieses Modus die Zeichen $ oder @ benutzt werden, so m&uuml;ssen sie doppelt angegeben werden:"Das ist ein einzelnes Dollar $$ Zeichen.".
	0 = erweitert Variablen nicht (Standard)
GUICloseOnESC
	<a name="GUICloseOnESC"></a>Mit Dr&uuml;cken der ESC-Taste in einer GUI, wird die $GUI_EVENT_CLOSE Nachricht gesendet.  Diese Option schaltet das Verhalten an und aus.
	1 = Sendet die $GUI_EVENT_CLOSE Nachricht wenn ESC gedr&uuml;ckt wird (Standard).
	0 = Sendet nicht die $GUI_EVENT_CLOSE Nachricht wenn ESC gedr&uuml;ckt wird.
GUICoordMode
	<a name="GUICoordMode"></a>Bestimmt, wie die Position eines Controls durch <a href="GUICtrlSetPos.htm">GUICtrlSetPos</a> definiert wird.
	1 = absolute Koordinaten (Standard)  relativ zur Dialog Box.
	0 = relative Position zum Anfang des letzten Controls (obere linke Ecke).
	2 = Zellenorientierte Positionierung relativ zur aktuellen Zelle. A -1 f&uuml;r linken oder oberen Parameter erh&ouml;ht nicht den Start.
	Ist die n&auml;chste Zeile -1,offset; n&auml;chste Zelle ist offset,-1; aktuelle Zelle ist -1,-1.
	Offensichtlich kann "offset" nicht den Wert -1 annehmen, da dieser reserviert ist, um das Nichtvergr&ouml;&szlig;ern zu indizieren. Aber wenn ein Vielfaches der Breite verwendet werden kann, empfiehlt es sich zu &uuml;berspringen oder zur&uuml;ckzugehen.
GUIDataSeparatorChar
	<a name="GUIDataSeparatorChar"></a>Legt das Trennzeichen f&uuml;r Teildaten fest, die mit GUICtrlSetData gesetzt werden.
	 Das Standardzeichen ist '|'.
GUIOnEventMode
	<a name="GUIOnEventMode"></a>Aktiviert/Deaktiviert die OnEvent Funktionsanmeldung.
	0 = (Standard) deaktiviert.
	1 = aktiviert.
GUIResizeMode
	<a name="GUIResizeMode"></a>&Auml;ndert das Standardverhalten bei Gr&ouml;&szlig;enver&auml;nderung f&uuml;r ein Control.
	0 = (Standard) beh&auml;lt das Standardverhalten bei.
	<1024 = jede Art der Gr&ouml;&szlig;enver&auml;nderung, siehe <a href="GUICtrlSetResizing.htm">GUICtrlSetResizing</a>.
GUIEventOptions
	<a name="GUIEventOptions"></a>&Auml;ndert das Verhalten bei Sonderereignissen oder R&uuml;ckgabewerten der GUI Funktionen.
	0 = (Standard) Windows Verhalten bei Klick auf Minimize, Restore, Maximize, Resize.
	1 = unterdr&uuml;ckt das Windows Verhalten bei Klick auf Minimize, Restore, Maximize, Resize oder Fenster Gr&ouml;&szlig;enver&auml;nderung. Sendet nur die Mitteilung.
MouseClickDelay
	<a name="MouseClickDelay"></a>Bestimmt die L&auml;nge der Anweisungspause zwischen Mausklicks.
	Zeit in Millisekunden f&uuml;r die Pause (Standard=10).
MouseClickDownDelay
	<a name="MouseClickDownDelay"></a>Bestimmt, wie lange die Maustaste gedr&uuml;ckt sein muss, damit der Klick registriert wird.
	Zeit in Millisekunden f&uuml;r die Pause (Standard=10).
MouseClickDragDelay
	<a name="MouseClickDragDelay"></a>Bestimmt die L&auml;nge der Anweisungspause zwischen Beginn und Ende einer Maus-Ziehen Operation.
	Zeit in Millisekunden f&uuml;r die Pause (Standard=250).
MouseCoordMode
	<a name="MouseCoordMode"></a>Legt fest, auf welche Art die Mausfunktionen Koordinaten nutzen, entweder absolut oder relativ zum momentan aktiven Fenster:
	0 = relative Koordinaten zum aktiven Fenster
	1 = absolute Bildschirm Koordinaten (Standard)
	2 = relative Koordinaten zum Anwendungsbereich des aktiven Fensters
MustDeclareVars
	<a name="MustDeclareVars"></a>Wenn diese Option genutzt wird m&uuml;ssen alle Variablen deklariert werden mit Dim, Local oder Global bevor sie verwendet werden k&ouml;nnen - beseitigt die M&ouml;glichkeit von Bugs durch Schreibfehler in Variablen.
	1 = Variable muss deklariert werden
	0 = Variable muss nicht deklariert werden (Standard)
PixelCoordMode
	<a name="PixelCoordMode"></a>Legt fest, auf welche Art die Pixelfunktionen Koordinaten nutzen, entweder absolut oder relativ zum Fenster welches durch hwnd definiert wurde (Standard = aktives Fenster):
	0 = relative Koordinaten zum definierten Fenster
	1 = absolute Bildschirm Koordinaten (Standard)
	2 = relative Koordinaten zum Anwendungsbereich des definierten Fensters
SendAttachMode
	<a name="SendAttachMode"></a>Legt fest, wie AutoIt eingehende Signale verkn&uuml;pft wenn die Send() Funktion verwendet wird.  Bei Nichtverkn&uuml;pfung (Standard Mode=0) kann die Ermittlung des Status von Capslock/Scrolllock und Numlock unzuverl&auml;ssig sein unter NT4.  Jedoch wird der attach Mode=1 gesetzt und der Send("{... down/up}") Syntax wird nicht funktionieren und es kann Probleme geben mit dem Senden von Tasten an "h&auml;ngende" Fenster.  ControlSend() ist IMMER verkn&uuml;pft und wird nicht beeintr&auml;chtigt durch diesen Modus.
	0 = nicht verkn&uuml;pfen (Standard)
	1 = verkn&uuml;pfen
SendCapslockMode
	<a name="SendCapslockMode"></a>Legt fest ob AutoIt den Status von Capslock speichern soll bevor eine Send Funktion ausgef&uuml;hrt wird und danach wiederherstellt.
	0 = nicht speichern/wiederherstellen
	1 = speichern/wiederherstellen (Standard)
SendKeyDelay
	<a name="SendKeyDelay"></a>Bestimmt die L&auml;nge der Anweisungspause zwischen dem Senden von Tastaturanschl&auml;gen. Ein Wert von 0 entfernt die Verz&ouml;gerung komplett.
	Zeit in Millisekunden f&uuml;r die Pause (Standard=5).
SendKeyDownDelay
	<a name="SendKeyDownDelay"></a>Bestimmt die Zeitdauer, die eine Taste gedr&uuml;ckt sein muss, bis ein Tastaturanschlag registriert wird. F&uuml;r Anwendungen die einige Zeit ben&ouml;tigen bis Tastaturanschl&auml;ge erkannt werden kann es notwendig sein den Standardwert zu erh&ouml;hen. Ein Wert von 0 entfernt die Verz&ouml;gerung komplett.
	Zeit in Millisekunden zur Pause (Standard=5).
TCPTimeout
	<a name="TCPTimeout"></a>Bestimmt die Zeit bevor TCP Funktionen wegen fehlender Kommunikation beendet werden.
	Zeit in Millisekunden bevor ein Timeout eintritt (Standard=100).
TrayAutoPause
	<a name="TrayAutoPause"></a>Das Skript pausiert bei einem Klick auf das Tray Icon.
	0 = keine Pause
	1 = Pause (Standard). Wenn kein Standardmen&uuml; vorhanden ist, tritt keine Pause auf.
TrayIconDebug
	<a name="TrayIconDebug"></a>Wenn es aktiviert ist, wird die aktuelle Skriptzeile im Trayicon Tipp angezeigt um das Debugging zu unterst&uuml;tzen.
	0 = keine Debug Information (Standard)
	1 = zeige Debug
TrayIconHide
	<a name="TrayIconHide"></a>Versteckt das AutoIt Tray Icon.  Anmerkung:  Das Icon wird jedoch, auch bei Option = 1, f&uuml;r ~750 Millisekunden angezeigt.
	0 = zeige Icon (Standard)
	1 = verstecke Icon
TrayMenuMode
	<a name="TrayMenuMode"></a>Erweitert das Verhalten des TrayMen&uuml;s eines Skripts. Dies kann durch Kombination (Addition) folgender Werte geschehen.
	0 = Standard Men&uuml;eintr&auml;ge (Skript Pausieren/Exit) werden angeh&auml;ngt an das benutzererzeugte Men&uuml;; Die Markierung der vom Benutzer erzeugten Men&uuml;elemente wird automatisch entfernt; bei einem Doppelklick auf das Trayicon wird die Control-ID zur&uuml;ckgegeben welche den "Default"-Stil (Standard) besitzt.
	1 = kein Standard Men&uuml;
	2 = Die Markierung der vom Benutzer erzeugten Men&uuml;elemente wird beim Anklicken nicht automatisch entfernt
	4 = gibt nicht die MenuitemID zur&uuml;ck welche den "default"-Stil im Hauptkontextmen&uuml; hat bei Doppelklick auf das Trayicon
	8 = schaltet die automatische &Uuml;berpr&uuml;fung von Radioelementgruppen ab
TrayOnEventMode
	<a name="TrayOnEventMode"></a>Aktiviert/deaktiviert die OnEvent Funktionsanmeldung f&uuml;r das Tray.
	0 = (Standard) deaktiviert
	1 = aktiviert
WinDetectHiddenText
	<a name="WinDetectHiddenText"></a>Legt fest ob versteckter Fenstertext f&uuml;r die Funktionen zur Fenster&uuml;berpr&uuml;fung "sichtbar" ist.
	0 = Versteckter Text wird nicht erkannt (Standard)
	1 = Erkennt versteckten Text
WinSearchChildren
	<a name="WinSearchChildren"></a>Erlaubt den Fenster Suchroutinen Child Fenster genauso zu durchsuchen, wie top-level Fenster.
	0 = Suche nur in top-level Fenstern (Standard)
	1 = Suche in top-level und Child Fenstern
WinTextMatchMode
	<a name="WinTextMatchMode"></a>Bestimmt die Methode der Text&uuml;berpr&uuml;fung f&uuml;r Fenster w&auml;hrend Suchoperationen.
	1 = Komplett / Langsamer Modus (Standard)
	2 = Schneller Modus
	Im Schnellmodus kann AutoIt &uuml;blicherweise nur Dialog Text, Button Text und die Bezeichnung einiger Controls "sehen". Im Standardmodus ist viel mehr Text sichtbar (beispielsweise der Inhalt eines Notepad-Fensters).
	Sollten Performanceprobleme bei der Suche nach vielen Fenstern auftreten kann der "quick"-Modus hilfreich sein.
WinTitleMatchMode
	<a name="WinTitleMatchMode"></a>Bestimmt welche Methode zur Fenstertitelerkennung in Suchaktionen verwendet wird.
	1 = Erkennt den Titel vom Anfang (Standard)
	2 = Erkennt Teile des Titels
	3 = Erkennt nur den exakten Titel
	4 = Erweiterter Modus, siehe <a href="../intro/windowsadvanced.htm">Erweiterte Fenstertiteldefinition</a>
	-1 bis -4 = erzwingt Kleinbuchstabenerkennung in &Uuml;bereinstimmung mit anderen Erkennungstypen.
WinWaitDelay
	<a name="WinWaitDelay"></a>Bestimmt die L&auml;nge der Anweisungspause f&uuml;r ein Skript nach einer erfolgreichen Fenster-bezogenen Operation.
	Zeit in Millisekunden f&uuml;r die Pause (Standard=250).
@@End@@

###Related###
Zu viele.


###Example###
@@IncludeExample@@
