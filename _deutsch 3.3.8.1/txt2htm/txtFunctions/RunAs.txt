###Function###
RunAs

###Description###
Startet ein externes Programm im Kontext eines anderen Benutzers.

###Syntax###
RunAs ( "username", "domain", "password", logon_flag, "program" [, "workingdir" [, show_flag [, opt_flag]]] )

###Parameters###
@@ParamTable@@
username
	Benutzername, mit dem eingeloggt wird.
domain
	Dom&auml;ne, gegen&uuml;ber der man sich authentifiziert.
password
	Passwort des Benutzers.
logon_flag
	0 - Interaktives Logon ohne Profil.
	1 - Interaktives Logon mit Profil.
	2 - Nur Netzwerk-Authentifizierung.
	4 - &Uuml;bernehme die Umgebung des aufrufenden Prozesses statt der Umgebung des Benutzers.
program
	Der komplette Pfad des Programms (.EXE, .BAT, .COM oder .PIF), die ausgef&uuml;hrt werden soll. (siehe Bemerkungen)
workingdir
	[optional] Arbeitsverzeichnis.  Wenn nicht angegeben, wird @SystemDir verwendet. Dies ist nicht der Pfad des Programms.
show_flag
	[optional] Legt die Sichtbarkeit des ausgef&uuml;hrten Programms fest:
	  @SW_HIDE = Verstecktes Fenster (benutzt alternativ das Schl&uuml;sselwort Default).
	  @SW_MINIMIZE = Minimiertes Fenster.
	  @SW_MAXIMIZE = Maximiertes Fenster.
opt_flag
	[optional] Steuert verschiedene Optionen, die die Interaktion zwischen Parent- und Child-Prozess betreffen (STDIO).
	  0x1 ($STDIN_CHILD)  = Stellt ein Handle zum STDIN-Stream des Child-Fensters bereit.
	  0x2 ($STDOUT_CHILD) = Stellt ein Handle zum STDOUT-Stream des Child-Fensters bereit.
	  0x4 ($STDERR_CHILD) = Stellt ein Handle zum STDERR-Stream des Child-Fensters bereit.
	  0x8 ($STDERR_MERGED) = Stellt das selbe Handle f&uuml;r den STDOUT- und STDERR-Stream bereit (Setzt $STDOUT_CHILD und $STDERR_CHILD).
	  0x10 ($STDIO_INHERIT_PARENT) = Stellt dem Child-Fenster das Handle zum STDIO-Stream des Parent-Fensters bereit. Kann nicht mit einem anderen STDIO-Flag kombiniert werden. Dieses Flag ist nur dann sinnvoll, wenn die Parent-Anwendung als Kommandozeilenapplikation kompiliert wurde.
	  0x10000 ($RUN_CREATE_NEW_CONSOLE) = Der Child-Kommandozeilenprozess wird in einem eigenen Kommandozeilenfenster ausgef&uuml;hrt. Dieses Flag ist nur dann sinnvoll, wenn die Parent-Anwendung als Kommandozeilenapplikation kompiliert wurde.
@@End@@


###ReturnValue###
@@ReturnTable@@
Erfolg:	Die PID des Prozesses, der gestartet wurde.
Fehler:	Gibt 0 zur&uuml;ck und setzt @error auf ungleich Null.
@@End@@


###Remarks###
Pfade mit Leerzeichen m&uuml;ssen in Anf&uuml;hrungszeichen gesetzt werden.

Es ist wichtig, ein Arbeitsverzeichnis anzugeben, f&uuml;r den der Benutzer Zugriffsrechte hat, in dessen Kontext der Prozess ausgef&uuml;hrt wird, anderenfalls schl&auml;gt der Aufruf der Funktion RunAs() fehl.

Es ist empfehlenswert, nur dann das "fremde" Benutzerprofil zu verwenden, wenn es auch wirklich ben&ouml;tigt wird. Es besteht eine geringe Wahrscheinlichkeit, dass das Profil unter bestimmten Bedingungen im Speicher h&auml;ngen bleibt. Wenn ein Skript RunAs() benutzt, um einen Prozess unter dem SYSTEM-Account zu starten (z.B. um als Dienst zu fungieren), und ein Benutzerprofil ist aktiv, muss daf&uuml;r gesorgt werden, dass das Skript nicht beendet wird, bevor der Child-Prozess geschlossen wurde.

Wenn man als Administrator angemeldet ist, muss der Service 'Sekund&auml;re Anmeldung' (RunAs) aktiv sein, sonst schl&auml;gt die Funktion fehl. Dies gilt nicht, wenn das SYSTEM-Konto aktiv ist.

Nach dem Start des angeforderten Programms wird das Skript weiter ausgef&uuml;hrt. Soll die Ausf&uuml;hrung des Skripts angehalten werden, bis das gestartete Programm beendet ist, so ist statt der RunAs-Funktion die RunAsWait-Funktion zu verwenden.

Das Bereitstellen der Standard-I/O-Parameter mit den geeigneten Werten ist Voraussetzung f&uuml;r die Interaktion des Child-Prozesses mit den Funktionen StderrRead, StdinWrite und StdoutRead.
Um mehrere I/O-Streams zu verwalten, kombiniert man die „Flag“-Werte (oder man benutzt $STDERR_CHILD, $STDIN_CHILD & $STDOUT_CHILD, die in Constants.au3 definiert sind).

Um die I/O-Streams zu schlie&szlig;en, m&uuml;ssen folgende Bedingungen erf&uuml;llt sein: 
1) Der Child-Prozess hat seine Seite des Streams geschlossen (das ist der Fall, wenn der Child-Prozess geschlossen wird). 
2) AutoIt muss gekaperte Streams auslesen, bis keine Daten mehr enthalten sind.  
3) Wenn STDIN dem Child-Prozess zugewiesen ist, muss StdinWrite() aufgerufen werden, um den Stream zu schlie&szlig;en. Sobald alle Streams als nicht mehr ben&ouml;tigt erkannt werden, werden alle intern verwendeten Ressourcen automatisch freigegeben.
StdioClose kann verwendet werden, um das Schlie&szlig;en der STDIO-Streams zu erzwingen.

Die 'logon_flags' mit Profil (0 oder 1) und Netzwerk-Authentifizierung (2) sind inkompatibel. Wenn beide in Kombination benutzt werden, kann das zu unvorhersehbaren Ergebnissen f&uuml;hren!

Aufgrund eines Problems, das Windows XP mit der Fenstererzeugung hat, kann die STDIO-Umleitung und Steuerung der Sichtbarkeit blockiert werden (siehe den Microsoft Knowledge Base Artikel KB818858 f&uuml;r weitere Informationen dar&uuml;ber, welche Versionen betroffen sind und wie das Problem umgangen werden kann).  Benutzer von Windows 2000, Windows XP SP2 (oder sp&auml;ter) oder Windows Vista sind nicht betroffen.

###Related###
Run, RunWait, RunAsWait, ShellExecute, ShellExecuteWait, StderrRead, StdinWrite, StdoutRead, StdioClose, ProcessClose


###Example###
@@IncludeExample@@
