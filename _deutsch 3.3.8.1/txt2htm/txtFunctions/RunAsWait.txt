###Function###
RunAsWait

###Description###
Startet ein externes Programm im Kontext eines anderen Benutzers und pausiert das Skript, bis das Programm beendet wurde.

###Syntax###
RunAsWait ( "username", "domain", "password", logon_flag, "program" [, "workingdir" [, show_flag [, opt_flag]]] )

###Parameters###
@@ParamTable@@
username
	Benutzername, mit dem eingeloggt wird.
domain
	Dom&auml;ne, gegen&uuml;ber der man sich authentifiziert.
password
	Passwort des Benutzers.
logon_flag
	0 - Interaktives Logon ohne Profil.
	1 - Interaktives Logon mit Profil.
	2 - Nur Netzwerk-Authentifizierung.
	4 - &Uuml;bernehme die Umgebung des aufrufenden Prozesses statt der Umgebung des Benutzers.
program
	Name der ausf&uuml;hrbaren Datei (EXE, BAT, COM oder PIF), die gestartet werden soll.
workingdir
	[optional] Arbeitsverzeichnis.  Wenn nicht angegeben, wird @SystemDir verwendet. Dies ist nicht der Pfad des Programms.
show_flag
	[optional] Legt die Sichtbarkeit des ausgef&uuml;hrten Programms fest:
	  @SW_HIDE = Verstecktes Fenster (benutzt alternativ das Schl&uuml;sselwort Default).
	  @SW_MINIMIZE = Minimiertes Fenster.
	  @SW_MAXIMIZE = Maximiertes Fenster.
opt_flag
	[optional] Steuert die Interaktion zwischen Parent- und Child-Prozess.
	  0x10000 ($RUN_CREATE_NEW_CONSOLE) = Der Child-Kommandozeilenprozess wird in einem eigenen Kommandozeilenfenster ausgef&uuml;hrt. Dieses Flag ist nur dann sinnvoll, wenn die Parent-Anwendung als Kommandozeilenapplikation kompiliert wurde.
@@End@@

###ReturnValue###
@@ReturnTable@@
Erfolg:	Gibt den Exit-Code des beendeten Programms zur&uuml;ck.
Fehler:	Gibt 0 zur&uuml;ck und setzt @error auf ungleich Null.
@@End@@

###Remarks###
Pfade mit Leerzeichen m&uuml;ssen in Anf&uuml;hrungszeichen gesetzt werden.

Es ist wichtig, ein Arbeitsverzeichnis anzugeben, f&uuml;r den der Benutzer Zugriffsrechte hat, in dessen Kontext der Prozess ausgef&uuml;hrt wird, anderenfalls schl&auml;gt der Aufruf der Funktion RunAs() fehl.

Es ist empfehlenswert, nur dann das "fremde" Benutzerprofil zu verwenden, wenn es auch wirklich ben&ouml;tigt wird. Es besteht eine geringe Wahrscheinlichkeit, dass das Profil unter bestimmten Bedingungen im Speicher h&auml;ngen bleibt. Wenn ein Skript RunAs() benutzt, um einen Prozess unter dem SYSTEM-Account zu starten (z.B. um als Dienst zu fungieren), und ein Benutzerprofil ist aktiv, muss daf&uuml;r gesorgt werden, dass das Skript nicht beendet wird, bevor der Child-Prozess geschlossen wurde.

Wenn man als Administrator angemeldet ist, muss der Service 'Sekund&auml;re Anmeldung' (RunAs) aktiv sein, sonst schl&auml;gt die Funktion fehl. Dies gilt nicht, wenn das SYSTEM-Konto aktiv ist.

Nach dem Start des angeforderten Programms pausiert das Skript, bis das gestartete Programm beendet wurde. Soll die Ausf&uuml;hrung des Skripts fortgesetzt werden, so ist statt der RunAsWait-Funktion die RunAs-Funktion zu verwenden.

Manche Programme scheinen beendet zu sein, obwohl sie noch ausgef&uuml;hrt werden. Diese Programme erzeugen neue Prozesse - in diesen F&auml;llen kann die Funktion ProcessWaitClose() verwendet werden, um auf das Ende dieser Prozesse zu warten.

Die 'logon_flags' mit Profil (0 oder 1) und Netzwerk-Authentifizierung (2) sind inkompatibel. Wenn beide in Kombination benutzt werden, kann das zu unvorhersehbaren Ergebnissen f&uuml;hren!

Aufgrund eines Problems, das Windows XP mit der Fenstererzeugung hat, kann die STDIO-Umleitung und Steuerung der Sichtbarkeit blockiert werden (siehe den Microsoft Knowledge Base Artikel KB818858 f&uuml;r weitere Informationen dar&uuml;ber, welche Versionen betroffen sind und wie das Problem umgangen werden kann).  Benutzer von Windows 2000, Windows XP SP2 (oder sp&auml;ter) oder Windows Vista sind nicht betroffen.

###Related###
ProcessWait, ProcessWaitClose, Run, RunWait, ShellExecute, ShellExecuteWait, RunAs

###Example###
@@IncludeExample@@
