###Function###
ObjCreateInterface

###Experimental###

###Description###
Erzeugt eine Referenz zu einem Objekt aus dem angegebenen Klassennamen/Object-Pointer, Interface-Identifier und Bezeichnungsstring.

###Syntax###
ObjCreateInterface ( "CLSID" , "IID" [, "interface_description",[flag = True]] )


###Parameters###
@@ParamTable@@
CLSID
	Klassenidentifizierer oder Object-Pointer. Der Klassenidentifizierer kann eine ProgID oder Stringrepr&auml;sentation der CLSID sein.
IID
	Stringrepr&auml;sentation des Interface-Identifiers.
interface_description
	[optional] String der die v-table des Objects bezeichnet. Das Default Keyword kann benutzt werden um auf IDispatch f&uuml;r dual interfaces zuzugreifen.
flag
	[optional] Der Standardwert ist True, was bedeutet dass das Object-Interface Eigenschaften von IUnknown erbt.
@@End@@

###ReturnValue###
@@ReturnTable@@
Erfolg:	Ein Objekt.
Fehler:	Setzt @error auf ungleich Null.
@@End@@


###Remarks###
<a href="ObjCreateInterface.htm">ObjCreateInterface()</a> erzeugt Objekte mit Methoden die im Interface-Bezeichnungsstring aufgelistet sind.
Bei COM Objekten (IUnknown basiert) sind die ersten drei Methoden immer QueryInterface, AddRef und Release. Diese d&uuml;rfen nicht im Bezeichnungsstring spezifiziert werden.

<b>Methoden die im Bezeichnungsstring aufgelistet sind, m&uuml;ssen in der v-table Reihenfolge des Interfaces sein. Falls eine ung&uuml;ltige oder fehlerhafte Bezeichnung angegeben wird, kann das zur Instabilit&auml;t oder zum Absturz von AutoIt f&uuml;hren.</b>

Das Format des Bezeichnungsstrings ist:
$sTagInterface = "MethodName1 RetType(ParamType1;ParamType2;...); MethodName2 RetType(..."

Standardm&auml;&szlig;ig, benutzt AutoIt die 'stdcall' Aufrufkonvention f&uuml;r COM. Um 'cdecl' zu benutzen muss ein ':cdecl' nach dem R&uuml;ckgabetyp angegeben werden.

G&uuml;ltige Typen sind:

@@ParamTable@@
<b>Typ</b>
	<b>Details</b>
none
	kein Wert (nur f&uuml;r R&uuml;ckgabetyp g&uuml;ltig - &auml;quivalent zu void in C)
byte
	ein vorzeichenloser 8 bit Integer
boolean
	ein vorzeichenloser 8 bit Integer
short
	ein 16 bit Integer
word, ushort
	ein vorzeichenloser 16 bit Integer
int, long
	ein 32 bit Integer
bool
	ein 32 bit Integer
dword, ulong, uint
	ein vorzeichenloser 32 bit Integer
hresult
	ein 32 bit Integer
int64
	ein 64 bit Integer
uint64
	ein vorzeichenloser 64 bit Integer
ptr
	ein allgemeiner Pointer (void *)
hwnd
	ein Fensterhandle (pointer)
handle
	ein Handle (pointer)
float
	eine Gleitkommazahl mit einfacher Genauigkeit
double
	eine Gleitkommazahl mit doppelter Genauigkeit
int_ptr, long_ptr, lresult, lparam
	ein Integer, gro&szlig; genug um einen Pointer zu enthalten wenn die x86 or x64 Versionen von AutoIt benutzt werden.
uint_ptr, ulong_ptr, dword_ptr, wparam
	ein vorzeichenloser Integer, gro&szlig; genug um einen Pointer zu enthalten wenn die x86 or x64 Versionen von AutoIt benutzt werden.
str
	ein ANSI String (ein Minimum von 65536 chars wird reserviert).
wstr
	ein UNICODE wide character String (ein Minimum von 65536 chars wird reserviert).
bstr
	ein zusammengesetzter Datentyp der aus einem L&auml;ngenpr&auml;fix, einem Datenstring und einem Endzeichen besteht.
variant
	eine tagged-Union welche jeden anderen Datentyp repr&auml;sentieren kann.
idispatch, object
	ein zusammengesetzter Datentyp der ein Object mit IDispatch Interface repr&auml;sentiert.
clsid
	128-bit Integer in Form eines GUID Strings
struct
	Struktur die mit <a href="DllStructCreate.htm">DllStructCreate()</a> erstellt wurde
*
	Um einen Datentypen via Referenz (Pointer) zu &uuml;bergeben muss * an den Datentyp angef&uuml;gt werden.  Beispiel: "int*" &uuml;bergibt einen Pointer zu einem "int" Typ.
@@End@@

Siehe <a href="../intro/ComRef.htm">Obj/COM Reference</a> f&uuml;r mehr Informationen &uuml;ber Objekte.


###Related###
ObjCreate


###Example###
@@IncludeExample@@
