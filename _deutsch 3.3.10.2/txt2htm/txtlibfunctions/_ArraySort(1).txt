###User Defined Function###
_ArraySort

###Description###
Sortiert ein 1-dimensionales oder 2-dimensionales Array durch einen festgelegten Index. Dabei werden Dualpivotsort-, Quicksort- und Insertionsort-Algorithmen verwendet.

###Syntax###
#include <Array.au3>
_ArraySort ( ByRef $avArray [, $iDescending = 0 [, $iStart = 0 [, $iEnd = 0 [, $iSubItem = 0 [, $iPivot = 0]]]]] )


###Parameters###
@@ParamTable@@
$avArray
	Array, das sortiert werden soll.
$iDescending
	[Optional] Falls auf 1 gesetzt wird absteigend sortiert.
$iStart
	[Optional] Start-Index f&uuml;r die Sortierung
$iEnd
	[Optional] Stopp-Index f&uuml;r die Sortierung
$iSubItem
	[Optional] Sub-Index der in einem 2-dimensionalen Array sortiert werden soll
$iPivot
	[optional] verwendet den Pivot-sort-Algorithmus - Standard algorithm = quicksort
@@End@@

###ReturnValue###
@@ReturnTable@@
Erfolg:	1
Fehler:	0 und setzt das @error-Flag ungleich 0
@error:	1 - $avArray ist kein Array
	2 - $iStart ist gr&ouml;&szlig;er als $iEnd
	3 - $iSubItem ist gr&ouml;&szlig;er als die Anzahl der Subitems
	4 - $avArray hat zu viele Dimensionen
	5 - $avArray ist leer
	6 - $iPivot wird mit einem 2D-Araay verwendet
@@End@@


###Remarks###
Standardm&auml;&szlig;ig verwendet diese UDF einen QuickSort-Algorithmus um das Array zu sortieren.
Wird bei 1D-Arrays durch den $iPivot-Parameter der DualPivotSort-Algorithmus verwendet, so kann dies f&uuml;r gro&szlig;e Arrays (gr&ouml;&szlig;er als 50 Elemente) bedeutend scheller sein.

Wird jedoch mit diesem Algorithmus ein 2D-Array sortiert, so ist es sehr viel langsamer und die UDF wird in diesem Fall einen Fehler zur&uuml;ckgeben.
Bei beiden Algorithmen werden relativ kurze Arrays mit einer Einf&uuml;gesortierung sortiert (kleiner als 15 Elemente mit QuickSort; kleiner 45 Elemente mit Dual PivotSort).
Es ist jedoch zu beachten, dass es keine Garantie gibt, dass ein bestimmter Algorithmus in dem vorliegenden Fall schneller sein wird. 


###Related###



###Example###
@@IncludeExample@@
